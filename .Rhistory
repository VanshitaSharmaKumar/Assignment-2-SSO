rep(3:1, times = 2)
rep(3:1, times=2)
rep(1:3, times=2)
rep(3:1, times=2)
seq(1,5,2)
seq(1,100,4)
rep(1:100, each = 3)
rep(1:100, rep=2)
rep(3:1, times=2)
rep(3:4-1:6)
?diagonal
??diagonal
??calculate diagonal
??calculatediagonal
matrix(1:10, nrow=4, ncol=4)
matrix(1:12, nrow=4, ncol=4)
matrix(1:10, nrow=4, ncol=4)
sum(diag(matrix(1:10,nrow=4,ncol=4)))
shoppinglist<-data.frame()
shoppinglist<-data.frame(product)
rep(3:1, times=2, len=5)
data()
data(AirPassengers)
AirPassengers
plot(AirPassengers)
years <- c(1990:2000)
sales <- c(100,110,105,95,107,115,122)
plot(years, sales)
sales <- c(100,110,105,95,107,115,122, 53, 523, 23)
plot(years,sales)
sales <- c(100,110,105,95,107,115,122, 53, 523, 23, 24)
plot(years,sales)
boxplot(years, sales)
x <- c(1:8)
y <- c(10, 11, 11, 10, 13, 14, 16, 18)
plot(x,y)
abline(lm(xËœy))
abline(lm(x~y))
abline(lm(y~x))
title("Regression of Y on X")
weka
R/Weka
help(Weka)
help(Weka)
help(RWeka)
??Weka
??RWeka
J48(formula, data, subset, na.action,
control = Weka_control(), options = NULL)
LMT(formula, data, subset, na.action,
control = Weka_control(), options = NULL)
M5P(formula, data, subset, na.action,
control = Weka_control(), options = NULL)
DecisionStump(formula, data, subset, na.action,
control = Weka_control(), options = NULL)
import
m1 <- J48(Species ~ ., data = iris)
## print and summary
m1
summary(m1) # calls evaluate_Weka_classifier()
table(iris$Species, predict(m1)) # by hand
## visualization
## use partykit package
if(require("partykit", quietly = TRUE)) plot(m1)
## or Graphviz
write_to_dot(m1)
## or Rgraphviz
## Not run:
library("Rgraphviz")
ff <- tempfile()
write_to_dot(m1, ff)
plot(agread(ff))
## End(Not run)
## Using some Weka data sets ...
## J48
DF2 <- read.arff(system.file("arff", "contact-lenses.arff",
package = "RWeka"))
m2 <- J48(`contact-lenses` ~ ., data = DF2)
m2
table(DF2$`contact-lenses`, predict(m2))
if(require("partykit", quietly = TRUE)) plot(m2)
## M5P
DF3 <- read.arff(system.file("arff", "cpu.arff", package = "RWeka"))
m3 <- M5P(class ~ ., data = DF3)
m3
if(require("partykit", quietly = TRUE)) plot(m3)
## Logistic Model Tree.
DF4 <- read.arff(system.file("arff", "weather.arff", package = "RWeka"))
m4 <- LMT(play ~ ., data = DF4)
m4
table(DF4$play, predict(m4))
## Larger scale example.
if(require("mlbench", quietly = TRUE)
&& require("partykit", quietly = TRUE)) {
## Predict diabetes status for Pima Indian women
data("PimaIndiansDiabetes", package = "mlbench")
## Fit J48 tree with reduced error pruning
m5 <- J48(diabetes ~ ., data = PimaIndiansDiabetes,
control = Weka_control(R = TRUE))
plot(m5)
## (Make sure that the plotting device is big enough for the tree.)
}
Email1 <- J48
install.packages("RWeka")
install.packages("partykit")
> library(RWeka)
> library(party)
library(RWeka)
library(partykit)
load("~/Downloads/spam.csv")
load("~/Downloads/spam.csv")
load("~/Downloads/spam.csv")
n=1002
x=0.7*n
prop.test(x,n,conf.level = 0.98)
sat = read.csv("sat.txt")
setwd("~/Documents/GitHub/Assignment-2-SSO")
sat = read.csv("sat.txt")
sat.head()
head(sa)
head(sat)
trees = read.csv("treeVolume.txt")
head(trees)
trees = read.table("bestand.txt", header = TRUE, sep = " ")
trees = read.table("treeVolume.txt", header = TRUE, sep = " ")
head(trees)
trees = read.table("treeVolume.txt", header = TRUE, sep = "\")
# Exercise 2.2a
trees = read.table("treeVolume.txt", header = TRUE, sep = "\\")
trees = read.table("treeVolume.txt", header = TRUE, sep = "\\")
head(trees)
trees = read.table("treeVolume.txt", header = TRUE, sep = ".")
head(trees)
trees = read.table("treeVolume.txt", header = TRUE, sep = "\t")
head(trees)
sat = read.table("sat.txt", header = TRUE, sep = " ")
trees = read.table("treeVolume.txt", header = TRUE, sep = "\t")
head(trees)
sat = read.table("sat.txt", header = TRUE, sep = " ")
head(sat)
trees = read.table("treeVolume.txt", header = TRUE, sep = "\t")
head(trees)
treeslm = lm(diameter~type, data = trees)
head(treaslm)
head(treeslm)
anova(treeslm)
treeslm = lm(volume~type, data = trees)
anova(treeslm)
mean(trees$volume[trees$type=="beech"])
mean(trees$volume[trees$type=="oak"])
trees$type = factor(trees$type)
head(trees)
sat = read.table("sat.txt", header = TRUE, sep = " ")
head(sat)
trees = read.table("treeVolume.txt", header = TRUE, sep = "\t")
trees$type = factor(trees$type)
head(trees)
treeslm = lm(volume~type, data = trees)
anova(treeslm)
mean(trees$volume[trees$type=="beech"])
mean(trees$volume[trees$type=="oak"])
trees$calc_vol = pi*(trees$diameter^2)*trees$height
head(trees)
model_c = lm(volume ~ calc_vol + type, data = trees)
anova(model_c)
trees$calc_vol = pi*(trees$diameter^2)*trees$height
model_c = lm(volume ~ calc_vol + type, data = trees)
anova(model_c)
trees$calc_vol = pi*(trees$(diameter/2)^2)*trees$height
model_c = lm(volume ~ calc_vol + type, data = trees)
anova(model_c)
trees$calc_vol = pi*((trees$diameter/2)^2)*trees$height
model_c = lm(volume ~ calc_vol + type, data = trees)
anova(model_c)
head(trees)
trees$calc_vol = pi*((trees$diameter/2)^2)*trees$height
model_c = lm(volume ~ calc_vol + type, data = trees)
summary(model_c)
anova(model_c)
